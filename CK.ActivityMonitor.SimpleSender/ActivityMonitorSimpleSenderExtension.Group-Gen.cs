#region LGPL License
/*----------------------------------------------------------------------------
* This file (CK.ActivityMonitor.StandardSender\ActivityMonitorSimpleSenderExtension.Group-Gen.cs 
* (and CK.ActivityMonitor.SimpleSender\ActivityMonitorSimpleSenderExtension.Group-Gen.tt) 
* is part of CK-Framework. 
*  
* CK-Framework is free software: you can redistribute it and/or modify 
* it under the terms of the GNU Lesser General Public License as published 
* by the Free Software Foundation, either version 3 of the License, or 
* (at your option) any later version. 
*  
* CK-Framework is distributed in the hope that it will be useful, 
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
* GNU Lesser General Public License for more details. 
* You should have received a copy of the GNU Lesser General Public License 
* along with CK-Framework.  If not, see <http://www.gnu.org/licenses/>. 
*  
* Copyright © 2007-2017, 
*     Invenietis <http://www.invenietis.com>
* All rights reserved. 
*-----------------------------------------------------------------------------*/
#endregion
//
// This file is generated by ActivityMonitorSimpleSenderExtension.Group-Gen.tt
//
using System;
using System.Runtime.CompilerServices;

namespace CK.Core
{
    public static partial class ActivityMonitorSimpleSenderExtension
    {
		 
		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with a text message. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with a text message associated to an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with a text message built only if the group must be emitted. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with a text message built only if the group must be emitted and an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #region Debug with tags.

		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, tags, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with a text message and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with a text message associated to an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with a text message built only if the group must be emitted and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Debug"/> group with a text message built only if the group must be emitted, an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenDebug( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Debug, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Debug | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #endregion

		 
		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with a text message. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with a text message associated to an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with a text message built only if the group must be emitted. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with a text message built only if the group must be emitted and an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #region Trace with tags.

		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, tags, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with a text message and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with a text message associated to an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with a text message built only if the group must be emitted and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Trace"/> group with a text message built only if the group must be emitted, an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenTrace( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Trace, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Trace | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #endregion

		 
		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with a text message. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with a text message associated to an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with a text message built only if the group must be emitted. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with a text message built only if the group must be emitted and an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #region Info with tags.

		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, tags, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with a text message and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with a text message associated to an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with a text message built only if the group must be emitted and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Info"/> group with a text message built only if the group must be emitted, an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenInfo( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Info, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Info | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #endregion

		 
		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with a text message. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with a text message associated to an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with a text message built only if the group must be emitted. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with a text message built only if the group must be emitted and an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #region Warn with tags.

		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, tags, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with a text message and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with a text message associated to an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with a text message built only if the group must be emitted and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Warn"/> group with a text message built only if the group must be emitted, an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenWarn( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Warn, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Warn | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #endregion

		 
		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with a text message. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with a text message associated to an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with a text message built only if the group must be emitted. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with a text message built only if the group must be emitted and an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #region Error with tags.

		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, tags, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with a text message and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with a text message associated to an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with a text message built only if the group must be emitted and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Error"/> group with a text message built only if the group must be emitted, an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenError( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Error, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Error | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #endregion

		 
		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with a text message. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with a text message associated to an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with a text message built only if the group must be emitted. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with a text message built only if the group must be emitted and an exception. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #region Fatal with tags.

		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, tags, null, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with a text message and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with a text message associated to an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, tags, text, @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with a text message built only if the group must be emitted and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), null, null, fileName, lineNumber )
                                                : null );
        }

		/// <summary>
        /// Opens a <see cref="LogLevel.Fatal"/> group with a text message built only if the group must be emitted, an exception and tags. 
        /// Regardless of whether it will be emitted or not (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> 
        /// and <paramref name="lineNumber"/>), it must always be closed.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this group.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A disposable object that can be used to set a function that provides a conclusion text and/or close the group.</returns>
        public static IDisposableGroup OpenFatal( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return @this.UnfilteredOpenGroup( @this.ShouldLogGroup( LogLevel.Fatal, fileName, lineNumber ) 
                                                ? new ActivityMonitorGroupData( LogLevel.Fatal | LogLevel.IsFiltered, tags, text?.Invoke(), @this.NextLogTime(), ex, null, fileName, lineNumber )
                                                : null );
        }

        #endregion

		 
	}
}
