#region LGPL License
/*----------------------------------------------------------------------------
* This file (CK.ActivityMonitor.StandardSender\ActivityMonitorSimpleSenderExtension.Gen.cs 
* (and CK.ActivityMonitor.SimpleSender\ActivityMonitorSimpleSenderExtension.Gen.tt) 
* is part of CK-Framework. 
*  
* CK-Framework is free software: you can redistribute it and/or modify 
* it under the terms of the GNU Lesser General Public License as published 
* by the Free Software Foundation, either version 3 of the License, or 
* (at your option) any later version. 
*  
* CK-Framework is distributed in the hope that it will be useful, 
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
* GNU Lesser General Public License for more details. 
* You should have received a copy of the GNU Lesser General Public License 
* along with CK-Framework.  If not, see <http://www.gnu.org/licenses/>. 
*  
* Copyright © 2007-2017, 
*     Invenietis <http://www.invenietis.com>
* All rights reserved. 
*-----------------------------------------------------------------------------*/
#endregion
//
// This file is generated by ActivityMonitorSimpleSenderExtension-Gen.tt
//
using System;
using System.Runtime.CompilerServices;

namespace CK.Core
{
    /// <summary>
    /// Provides OpenXXX and XXX (Debug, Trace, Info,...Fatal) extension methods for <see cref="IActivityMonitor"/>.
    /// </summary>
    public static partial class ActivityMonitorSimpleSenderExtension
    {
		 
		/// <summary>
        /// Emits a <see cref="LogLevel.Debug"/> with an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Debug"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Debug"/> string associated to an exception if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Debug"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Debug"/> string associated to an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #region Debug with tags.

		/// <summary>
        /// Emits a <see cref="LogLevel.Debug"/> with an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, ex, tags, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Debug"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, null, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }
		/// <summary>
        /// Emits a <see cref="LogLevel.Debug"/> string associated to an exception and tags if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, ex, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Debug"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, null, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Debug"/> string associated to an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Debug( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Debug, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Debug | LogLevel.IsFiltered, ex, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #endregion

		 
		/// <summary>
        /// Emits a <see cref="LogLevel.Trace"/> with an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Trace"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Trace"/> string associated to an exception if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Trace"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Trace"/> string associated to an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #region Trace with tags.

		/// <summary>
        /// Emits a <see cref="LogLevel.Trace"/> with an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, ex, tags, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Trace"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, null, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }
		/// <summary>
        /// Emits a <see cref="LogLevel.Trace"/> string associated to an exception and tags if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, ex, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Trace"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, null, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Trace"/> string associated to an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Trace( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Trace, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Trace | LogLevel.IsFiltered, ex, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #endregion

		 
		/// <summary>
        /// Emits a <see cref="LogLevel.Info"/> with an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Info"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Info"/> string associated to an exception if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Info"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Info"/> string associated to an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #region Info with tags.

		/// <summary>
        /// Emits a <see cref="LogLevel.Info"/> with an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, ex, tags, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Info"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, null, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }
		/// <summary>
        /// Emits a <see cref="LogLevel.Info"/> string associated to an exception and tags if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, ex, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Info"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, null, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Info"/> string associated to an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Info( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Info, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Info | LogLevel.IsFiltered, ex, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #endregion

		 
		/// <summary>
        /// Emits a <see cref="LogLevel.Warn"/> with an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Warn"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Warn"/> string associated to an exception if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Warn"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Warn"/> string associated to an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #region Warn with tags.

		/// <summary>
        /// Emits a <see cref="LogLevel.Warn"/> with an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, ex, tags, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Warn"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, null, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }
		/// <summary>
        /// Emits a <see cref="LogLevel.Warn"/> string associated to an exception and tags if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, ex, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Warn"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, null, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Warn"/> string associated to an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Warn( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Warn, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Warn | LogLevel.IsFiltered, ex, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #endregion

		 
		/// <summary>
        /// Emits a <see cref="LogLevel.Error"/> with an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Error"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Error"/> string associated to an exception if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Error"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Error"/> string associated to an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #region Error with tags.

		/// <summary>
        /// Emits a <see cref="LogLevel.Error"/> with an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, ex, tags, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Error"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, null, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }
		/// <summary>
        /// Emits a <see cref="LogLevel.Error"/> string associated to an exception and tags if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, ex, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Error"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, null, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Error"/> string associated to an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Error( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Error, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Error | LogLevel.IsFiltered, ex, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #endregion

		 
		/// <summary>
        /// Emits a <see cref="LogLevel.Fatal"/> with an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Fatal"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Fatal"/> string associated to an exception if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, string text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Fatal"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, Func<string> text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Fatal"/> string associated to an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, Func<string> text, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #region Fatal with tags.

		/// <summary>
        /// Emits a <see cref="LogLevel.Fatal"/> with an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, ex, tags, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.Fatal"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, string text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, null, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }
		/// <summary>
        /// Emits a <see cref="LogLevel.Fatal"/> string associated to an exception and tags if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, string text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, ex, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Fatal"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, Func<string> text, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, null, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.Fatal"/> string associated to an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void Fatal( this IActivityMonitor @this, Func<string> text, Exception ex, CKTag tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.Fatal, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.Fatal | LogLevel.IsFiltered, ex, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #endregion

		 
	}
}
