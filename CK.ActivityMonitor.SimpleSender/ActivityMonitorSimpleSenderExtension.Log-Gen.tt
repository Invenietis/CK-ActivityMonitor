<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
//
// This file is generated by ActivityMonitorSimpleSenderExtension.Log-Gen.tt
//
using System;
using System.Runtime.CompilerServices;
using System.ComponentModel;


namespace CK.Core
{
    public static partial class ActivityMonitorSimpleSenderExtension
    {
		<#
			foreach( var level in new[]{ "Debug", "Trace", "Info", "Warn", "Error", "Fatal" } )
			{
		#>
/// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> with an exception if it must be emitted (this depends on <see cref="IActivityLineEmitter.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <see cref="IActivityLineEmitter.AutoTags"/>).
        /// </summary>
        /// <param name="logger">This <see cref="IActivityLineEmitter"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>True if the log has been emitted, false otherwise.</returns>
        [MethodImpl( MethodImplOptions.AggressiveInlining )]
        public static bool <#= level #>( this IActivityLineEmitter logger, Exception ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( logger.ShouldLogLine( LogLevel.<#= level #>, null, out var finalTags ) )
            {
                var d = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, finalTags, null, ex, fileName, lineNumber, false );
                logger.UnfilteredLog( ref d );
                return true;
            }
            return false;
        }

		    /// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> string if it must be emitted (this depends on <see cref="IActivityLineEmitter.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <see cref="IActivityLineEmitter.AutoTags"/>).
        /// </summary>
        /// <param name="logger">This <see cref="IActivityLineEmitter"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>True if the log has been emitted, false otherwise.</returns>
        [MethodImpl( MethodImplOptions.AggressiveInlining )]
        public static bool <#= level #>( this IActivityLineEmitter logger, string text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( logger.ShouldLogLine( LogLevel.<#= level #>, null, out var finalTags ) )
            {
                var d = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, finalTags, text, null, fileName, lineNumber, false );
                logger.UnfilteredLog( ref d );
                return true;
            }
            return false;
        }

        /// <inheritdoc cref="<#= level #>(IActivityLineEmitter,string,int,string?)"/>
        public static bool <#= level #>( this IActivityLineEmitter logger,
                                [InterpolatedStringHandlerArgument( "logger" )] LogHandler.Line<#= level #> text,
                                [CallerLineNumber] int lineNumber = 0,
                                [CallerFilePath] string? fileName = null )
        {
            var t = text._handler.ToStringAndClear();
            if( t != null )
            {
                var line = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, text._handler.FinalTags, t, null, fileName, lineNumber, false );
                logger.UnfilteredLog( ref line );
                return true;
            }
            return false;
        }

		    /// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> string associated to an exception if it must be emitted 
        /// (this depends on <see cref="IActivityLineEmitter.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/>
        /// and may also depend on <see cref="IActivityLineEmitter.AutoTags"/>).
        /// </summary>
        /// <param name="logger">This <see cref="IActivityLineEmitter"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>True if the log has been emitted, false otherwise.</returns>
        [MethodImpl( MethodImplOptions.AggressiveInlining )]
        public static bool <#= level #>( this IActivityLineEmitter logger,
                                         string? text,
                                         Exception? ex,
                                         [CallerLineNumber]int lineNumber = 0,
                                         [CallerFilePath]string? fileName = null )
        {
            if( logger.ShouldLogLine( LogLevel.<#= level #>, null, out var finalTags ) )
            {
                var d = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, finalTags, text, ex, fileName, lineNumber, false );
                logger.UnfilteredLog( ref d );
                return true;
            }
            return false;
        }

        /// <inheritdoc cref="<#= level #>(IActivityLineEmitter,string,Exception?,int,string?)"/>
        public static bool <#= level #>( this IActivityLineEmitter logger,
                                [InterpolatedStringHandlerArgument( "logger" )] LogHandler.Line<#= level #> text,
                                Exception? ex,
                                [CallerLineNumber] int lineNumber = 0,
                                [CallerFilePath] string? fileName = null )
        {
            var t = text._handler.ToStringAndClear();
            if( t != null )
            {
                var line = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, text._handler.FinalTags, t, ex, fileName, lineNumber, false );
                logger.UnfilteredLog( ref line );
                return true;
            }
            return false;
        }

        #region <#= level #> with tags.

		    /// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> with an exception and tags if it must be emitted (this depends on <see cref="IActivityLineEmitter.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="tags"/> and <see cref="IActivityLineEmitter.AutoTags"/>).
        /// </summary>
        /// <param name="logger">This <see cref="IActivityLineEmitter"/>.</param>
        /// <param name="tags">Optional tags for this log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>True if the log has been emitted, false otherwise.</returns>
       [MethodImpl( MethodImplOptions.AggressiveInlining )]
        public static bool <#= level #>( this IActivityLineEmitter logger,
                                         CKTrait? tags,
                                         Exception ex,
                                         [CallerLineNumber]int lineNumber = 0,
                                         [CallerFilePath]string? fileName = null )
        {
            if( logger.ShouldLogLine( LogLevel.<#= level #>, tags, out var finalTags ) )
            {
                var d = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, finalTags, null, ex, fileName, lineNumber, false );
                logger.UnfilteredLog( ref d );
                return true;
            }
            return false;
        }

		    /// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> string and tags if it must be emitted (this depends on <see cref="IActivityLineEmitter.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="tags"/> and <see cref="IActivityLineEmitter.AutoTags"/>).
        /// </summary>
        /// <param name="logger">This <see cref="IActivityLineEmitter"/>.</param>
        /// <param name="tags">Optional tags for this log.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>True if the log has been emitted, false otherwise.</returns>
        [MethodImpl( MethodImplOptions.AggressiveInlining )]
        public static bool <#= level #>( this IActivityLineEmitter logger,
                                         CKTrait? tags,
                                         string text,
                                         [CallerLineNumber]int lineNumber = 0,
                                         [CallerFilePath]string? fileName = null )
        {
            if( logger.ShouldLogLine( LogLevel.<#= level #>, tags, out var finalTags ) )
            {
                var d = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, finalTags, text, null, fileName, lineNumber, false );
                logger.UnfilteredLog( ref d );
                return true;
            }
            return false;
        }

        /// <inheritdoc cref="<#= level #>(IActivityLineEmitter,CKTrait?,string,int,string?)"/>
        public static bool <#= level #>( this IActivityLineEmitter logger,
                                CKTrait? tags,
                                [InterpolatedStringHandlerArgument( "logger", "tags" )] LogHandler.Line<#= level #>WithTags text,
                                [CallerLineNumber] int lineNumber = 0,
                                [CallerFilePath] string? fileName = null )
        {
            var t = text._handler.ToStringAndClear();
            if( t != null )
            {
                var line = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, text._handler.FinalTags, t, null, fileName, lineNumber, false );
                logger.UnfilteredLog( ref line );
                return true;
            }
            return false;
        }

		    /// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> string associated to an exception and tags if it must be emitted 
        /// (this depends on <see cref="IActivityLineEmitter.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> and may
        /// also depend on <paramref name="tags"/> and <see cref="IActivityLineEmitter.AutoTags"/>).
        /// </summary>
        /// <param name="logger">This <see cref="IActivityLineEmitter"/>.</param>
        /// <param name="tags">Optional tags for this log.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>True if the log has been emitted, false otherwise.</returns>
        public static bool <#= level #>( this IActivityLineEmitter logger,
                                         CKTrait? tags,
                                         string? text,
                                         Exception? ex,
                                         [CallerLineNumber]int lineNumber = 0,
                                         [CallerFilePath]string? fileName = null )
        {
            if( logger.ShouldLogLine( LogLevel.<#= level #>, tags, out var finalTags ) )
            {
                var d = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, finalTags, text, ex, fileName, lineNumber, false );
                logger.UnfilteredLog( ref d );
                return true;
            }
            return false;
        }

        /// <inheritdoc cref="<#= level #>(IActivityLineEmitter,CKTrait?,string,Exception,int,string?)"/>
        public static bool <#= level #>( this IActivityLineEmitter logger,
                                CKTrait? tags,
                                [InterpolatedStringHandlerArgument( "logger", "tags" )] LogHandler.Line<#= level #>WithTags text,
                                Exception? ex,
                                [CallerLineNumber] int lineNumber = 0,
                                [CallerFilePath] string? fileName = null )
        {
            var t = text._handler.ToStringAndClear();
            if( t != null )
            {
                var line = logger.CreateActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, text._handler.FinalTags, t, ex, fileName, lineNumber, false );
                logger.UnfilteredLog( ref line );
                return true;
            }
            return false;
        }

       #endregion

		<#
			}
		#> 
	}

    namespace LogHandler
    {
       	<#
		foreach( var level in new[]{ "Debug", "Trace", "Info", "Warn", "Error", "Fatal" } )
		{
		#> 
    /// <summary>
    /// Provides an interpolated string handler for <#= level #> lines that only performs formatting if the log must be emitted.
    /// This supports the logging framework and must not be used directly.
    /// </summary>
    [EditorBrowsable( EditorBrowsableState.Never )]
    [InterpolatedStringHandler]
    public ref struct Line<#= level #>
    {
        internal InternalHandler _handler;

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public Line<#= level #>( int literalLength, int formattedCount, IActivityLineEmitter logger, out bool shouldAppend )
        {
            _handler = new InternalHandler( literalLength, formattedCount, logger, LogLevel.<#= level #>, null, out shouldAppend );
        }

        public void AppendFormatted( Type? t, string? format ) => _handler.AppendFormatted( t, format );

        public void AppendLiteral( string value ) => _handler.AppendLiteral( value );

        public void AppendFormatted<T>( T value ) => _handler.AppendFormatted( value );

        public void AppendFormatted<T>( T value, string? format ) => _handler.AppendFormatted( value, format );

        public void AppendFormatted<T>( T value, int alignment ) => _handler.AppendFormatted( value, alignment );

        public void AppendFormatted<T>( T value, int alignment, string? format ) => _handler.AppendFormatted( value, alignment, format );

        public void AppendFormatted( ReadOnlySpan<char> value ) => _handler.AppendFormatted( value );

        public void AppendFormatted( ReadOnlySpan<char> value, int alignment = 0, string? format = null ) => _handler.AppendFormatted( value, alignment, format );

        public void AppendFormatted( string? value ) => _handler.AppendFormatted( value );

        public void AppendFormatted( string? value, int alignment = 0, string? format = null ) => _handler.AppendFormatted( value, alignment, format );

        public void AppendFormatted( object? value, int alignment = 0, string? format = null ) => _handler.AppendFormatted( value, alignment, format );
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
    }

    /// <summary>
    /// Provides an interpolated string handler for <#= level #> lines with tags that only performs formatting if the log must be emitted.
    /// This supports the logging framework and must not be used directly.
    /// </summary>
    [EditorBrowsable( EditorBrowsableState.Never )]
    [InterpolatedStringHandler]
    public ref struct Line<#= level #>WithTags
    {
        internal InternalHandler _handler;

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public Line<#= level #>WithTags( int literalLength, int formattedCount, IActivityLineEmitter logger, CKTrait? tags, out bool shouldAppend )
        {
            _handler = new InternalHandler( literalLength, formattedCount, logger, LogLevel.<#= level #>, tags, out shouldAppend );
        }

        public void AppendFormatted( Type? t, string? format ) => _handler.AppendFormatted( t, format );

        public void AppendLiteral( string value ) => _handler.AppendLiteral( value );

        public void AppendFormatted<T>( T value ) => _handler.AppendFormatted( value );

        public void AppendFormatted<T>( T value, string? format ) => _handler.AppendFormatted( value, format );

        public void AppendFormatted<T>( T value, int alignment ) => _handler.AppendFormatted( value, alignment );

        public void AppendFormatted<T>( T value, int alignment, string? format ) => _handler.AppendFormatted( value, alignment, format );

        public void AppendFormatted( ReadOnlySpan<char> value ) => _handler.AppendFormatted( value );

        public void AppendFormatted( ReadOnlySpan<char> value, int alignment = 0, string? format = null ) => _handler.AppendFormatted( value, alignment, format );

        public void AppendFormatted( string? value ) => _handler.AppendFormatted( value );

        public void AppendFormatted( string? value, int alignment = 0, string? format = null ) => _handler.AppendFormatted( value, alignment, format );

        public void AppendFormatted( object? value, int alignment = 0, string? format = null ) => _handler.AppendFormatted( value, alignment, format );
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
    }


		<#
		}
		#> 
    }
}

