<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
//
// This file is generated by ActivityMonitorSimpleSenderExtension-Gen.tt
//
using System;
using System.Runtime.CompilerServices;
#nullable enable

namespace CK.Core
{
    /// <summary>
    /// Provides OpenXXX and XXX (Debug, Trace, Info,...Fatal) extension methods for <see cref="IActivityMonitor"/>.
    /// </summary>
    public static partial class ActivityMonitorSimpleSenderExtension
    {
		<#
			foreach( var level in new[]{ "Debug", "Trace", "Info", "Warn", "Error", "Fatal" } )
			{
		#> 
		/// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> with an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, Exception? ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, string? text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> string associated to an exception if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, string? text, Exception? ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.<#= level #>"/> string if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, Func<string?>? text, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, null, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.<#= level #>"/> string associated to an exception if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, Func<string?>? text, Exception? ex, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, ex, ActivityMonitor.Tags.Empty, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #region <#= level #> with tags.

		/// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> with an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, Exception? ex, CKTrait? tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, ex, tags, null, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, string? text, CKTrait? tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, null, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }
		/// <summary>
        /// Emits a <see cref="LogLevel.<#= level #>"/> string associated to an exception and tags if it must be emitted 
        /// (this depends on <see cref="IActivityMonitor.ActualFilter"/>, the global default <see cref="ActivityMonitor.DefaultFilter"/> 
        /// and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">The text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, string? text, Exception? ex, CKTrait? tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, ex, tags, text, @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.<#= level #>"/> string and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, Func<string?>? text, CKTrait? tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, null, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

		/// <summary>
        /// Generates and emits a <see cref="LogLevel.<#= level #>"/> string associated to an exception and tags if it must be emitted (this depends on <see cref="IActivityMonitor.ActualFilter"/>, 
        /// the global default <see cref="ActivityMonitor.DefaultFilter"/> and may also depend on <paramref name="fileName"/> and <paramref name="lineNumber"/>).
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="text">A function (that will be called only if required) that returns the text to log.</param>
        /// <param name="ex">The exception to log.</param>
        /// <param name="tags">The tags for this log.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        public static void <#= level #>( this IActivityMonitor @this, Func<string?>? text, Exception? ex, CKTrait? tags, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string? fileName = null )
        {
            if( @this.ShouldLogLine( LogLevel.<#= level #>, fileName, lineNumber ) )
            {
                @this.UnfilteredLog( new ActivityMonitorLogData( LogLevel.<#= level #> | LogLevel.IsFiltered, ex, tags, text?.Invoke(), @this.NextLogTime(), fileName, lineNumber ) );
            }
        }

        #endregion

		<#
			}
		#> 
	}
}
