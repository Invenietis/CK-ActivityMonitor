<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#region LGPL License
/*----------------------------------------------------------------------------
* This file (CK.Core\ActivityMonitor\Impl\ActivityMonitorSenderExtension.Gen.cs and CK.Core\ActivityMonitor\Impl\ActivityMonitorSenderExtension.Gen.tt ) is part of CiviKey. 
*  
* CiviKey is free software: you can redistribute it and/or modify 
* it under the terms of the GNU Lesser General Public License as published 
* by the Free Software Foundation, either version 3 of the License, or 
* (at your option) any later version. 
*  
* CiviKey is distributed in the hope that it will be useful, 
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
* GNU Lesser General Public License for more details. 
* You should have received a copy of the GNU Lesser General Public License 
* along with CiviKey.  If not, see <http://www.gnu.org/licenses/>. 
*  
* Copyright © 2007-2015, 
*     Invenietis <http://www.invenietis.com>,
*     In’Tech INFO <http://www.intechinfo.fr>,
* All rights reserved. 
*-----------------------------------------------------------------------------*/
#endregion
//
// This file is generated by ActivityMonitorSenderExtension-Gen.tt
//
using System;
using System.Runtime.CompilerServices;

namespace CK.Core
{
    /// <summary>
    /// Provides OpenXXX and XXX (Trace, Info,...Fatal) extension methods for <see cref="IActivityMonitor"/>.
    /// </summary>
    public static partial class ActivityMonitorSenderExtension
    {
		<#
			foreach( var level in new[]{ "Trace", "Info", "Warn", "Error", "Fatal" } )
			{
		#> 
		/// <summary>
        /// Filters <see cref="LogLevel.<#= level #>"/> logs. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorLineSender"/> or null if the log must not be emitted.</returns>
        static public IActivityMonitorLineSender <#= level #>( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilterLogLine( @this, LogLevel.<#= level #>, fileName, lineNumber );
        }

		/// <summary>
        /// Filtered <see cref="LogLevel.<#= level #>"/> group opening. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorGroupSender"/> or null if the group must not be emitted.</returns>
		static public IActivityMonitorGroupSender Open<#= level #>( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilteredGroup( @this, LogLevel.<#= level #>, fileName, lineNumber );
        }

		<#
			}
		#> 
	}
}
