#region LGPL License
/*----------------------------------------------------------------------------
* This file (CK.Core\ActivityMonitor\Impl\ActivityMonitorSenderExtension.Gen.cs and CK.Core\ActivityMonitor\Impl\ActivityMonitorSenderExtension.Gen.tt ) is part of CiviKey. 
*  
* CiviKey is free software: you can redistribute it and/or modify 
* it under the terms of the GNU Lesser General Public License as published 
* by the Free Software Foundation, either version 3 of the License, or 
* (at your option) any later version. 
*  
* CiviKey is distributed in the hope that it will be useful, 
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
* GNU Lesser General Public License for more details. 
* You should have received a copy of the GNU Lesser General Public License 
* along with CiviKey.  If not, see <http://www.gnu.org/licenses/>. 
*  
* Copyright © 2007-2015, 
*     Invenietis <http://www.invenietis.com>,
*     In’Tech INFO <http://www.intechinfo.fr>,
* All rights reserved. 
*-----------------------------------------------------------------------------*/
#endregion
//
// This file is generated by ActivityMonitorSenderExtension-Gen.tt
//
using System;
using System.Runtime.CompilerServices;

namespace CK.Core
{
    /// <summary>
    /// Provides OpenXXX and XXX (Debug, Trace, Info,...Fatal) extension methods for <see cref="IActivityMonitor"/>.
    /// </summary>
    public static partial class ActivityMonitorSenderExtension
    {

        /// <summary>
        /// Filters <see cref="LogLevel.Debug"/> logs. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorLineSender"/> or null if the log must not be emitted.</returns>
        static public IActivityMonitorLineSender Debug(this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null)
        {
            return FilterLogLine(@this, LogLevel.Debug, fileName, lineNumber);
        }

        /// <summary>
        /// Filtered <see cref="LogLevel.Debug"/> group opening. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorGroupSender"/> or null if the group must not be emitted.</returns>
        static public IActivityMonitorGroupSender OpenDebug(this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null)
        {
            return FilteredGroup(@this, LogLevel.Debug, fileName, lineNumber);
        }


        /// <summary>
        /// Filters <see cref="LogLevel.Trace"/> logs. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorLineSender"/> or null if the log must not be emitted.</returns>
        static public IActivityMonitorLineSender Trace(this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null)
        {
            return FilterLogLine(@this, LogLevel.Trace, fileName, lineNumber);
        }

        /// <summary>
        /// Filtered <see cref="LogLevel.Trace"/> group opening. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorGroupSender"/> or null if the group must not be emitted.</returns>
        static public IActivityMonitorGroupSender OpenTrace(this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null)
        {
            return FilteredGroup(@this, LogLevel.Trace, fileName, lineNumber);
        }


        /// <summary>
        /// Filters <see cref="LogLevel.Info"/> logs. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorLineSender"/> or null if the log must not be emitted.</returns>
        static public IActivityMonitorLineSender Info( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilterLogLine( @this, LogLevel.Info, fileName, lineNumber );
        }

		/// <summary>
        /// Filtered <see cref="LogLevel.Info"/> group opening. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorGroupSender"/> or null if the group must not be emitted.</returns>
		static public IActivityMonitorGroupSender OpenInfo( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilteredGroup( @this, LogLevel.Info, fileName, lineNumber );
        }

		 
		/// <summary>
        /// Filters <see cref="LogLevel.Warn"/> logs. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorLineSender"/> or null if the log must not be emitted.</returns>
        static public IActivityMonitorLineSender Warn( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilterLogLine( @this, LogLevel.Warn, fileName, lineNumber );
        }

		/// <summary>
        /// Filtered <see cref="LogLevel.Warn"/> group opening. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorGroupSender"/> or null if the group must not be emitted.</returns>
		static public IActivityMonitorGroupSender OpenWarn( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilteredGroup( @this, LogLevel.Warn, fileName, lineNumber );
        }

		 
		/// <summary>
        /// Filters <see cref="LogLevel.Error"/> logs. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorLineSender"/> or null if the log must not be emitted.</returns>
        static public IActivityMonitorLineSender Error( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilterLogLine( @this, LogLevel.Error, fileName, lineNumber );
        }

		/// <summary>
        /// Filtered <see cref="LogLevel.Error"/> group opening. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorGroupSender"/> or null if the group must not be emitted.</returns>
		static public IActivityMonitorGroupSender OpenError( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilteredGroup( @this, LogLevel.Error, fileName, lineNumber );
        }

		 
		/// <summary>
        /// Filters <see cref="LogLevel.Fatal"/> logs. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorLineSender"/> or null if the log must not be emitted.</returns>
        static public IActivityMonitorLineSender Fatal( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilterLogLine( @this, LogLevel.Fatal, fileName, lineNumber );
        }

		/// <summary>
        /// Filtered <see cref="LogLevel.Fatal"/> group opening. FileName end LineNumber may be also used to determine whether
        /// the log should eventually be emitted.
        /// </summary>
        /// <param name="this">This <see cref="IActivityMonitor"/>.</param>
        /// <param name="lineNumber">Line number in the source file (automatically injected by C# compiler).</param>
        /// <param name="fileName">Source file name of the emitter (automatically injected by C# compiler).</param>
        /// <returns>A <see cref="ActivityMonitorGroupSender"/> or null if the group must not be emitted.</returns>
		static public IActivityMonitorGroupSender OpenFatal( this IActivityMonitor @this, [CallerLineNumber]int lineNumber = 0, [CallerFilePath]string fileName = null )
        {
            return FilteredGroup( @this, LogLevel.Fatal, fileName, lineNumber );
        }

		 
	}
}
